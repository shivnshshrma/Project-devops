# CI/CD Pipeline with Jenkins, SonarQube, and Docker on AWS

This project demonstrates an end-to-end CI/CD pipeline that leverages Jenkins for automation, SonarQube for code quality checks, and Docker for containerization. The infrastructure is hosted on AWS with three dedicated EC2 instances, each serving a specific purpose.

## Table of Contents

- [Overview](#overview)
- [Architecture](#architecture)
- [Components](#components)
- [Workflow](#workflow)
- [Setup and Installation](#setup-and-installation)
- [Configuration Details](#configuration-details)
- [Additional Notes](#additional-notes)
- [License](#license)

## Overview

The main goal of this project is to automate the process of building, testing, and deploying code changes. The workflow is triggered by code pushes to GitHub, which then initiates a series of automated tasks:
- **Jenkins**: Orchestrates the pipeline.
- **SonarQube**: Performs static code analysis and quality checks.
- **Docker**: Builds and deploys the containerized application.

## Architecture

The project is structured using three separate AWS EC2 instances:
1. **Jenkins Server**: Hosts Jenkins and manages the CI/CD pipeline.
2. **SonarQube Server**: Runs SonarQube to analyze code quality and maintain standards.
3. **Docker Server**: Responsible for building Docker images and deploying the application.

Below is a high-level diagram of the architecture:


## Components

### GitHub
- **Repository**: Stores the project source code.
- **Webhook**: Configured to trigger the Jenkins pipeline on code pushes/PRs.

### Jenkins
- **Pipeline Configuration**: Automates the build, test, and deploy process.
- **Integration**: Receives webhook calls from GitHub and communicates with SonarQube and Docker.

### SonarQube
- **Static Code Analysis**: Evaluates code quality, tracks bugs, code smells, and security vulnerabilities.
- **Quality Gates**: Ensures that code meets defined quality criteria before deployment.

### Docker
- **Dockerfile**: Contains instructions for building the application container.
- **Container Deployment**: Deploys the Docker image to the production environment on the Docker server.

## Workflow

1. **Code Push**: A developer pushes code changes to the GitHub repository.
2. **Webhook Trigger**: The webhook notifies Jenkins of the code change.
3. **Jenkins Pipeline Execution**:
   - **Checkout**: Jenkins pulls the latest code.
   - **Code Analysis**: Jenkins triggers SonarQube to analyze the code. If the quality gates are not met, the pipeline fails.
   - **Build & Test**: If code quality is satisfactory, Jenkins proceeds with the build and test steps.
4. **Docker Build & Deployment**:
   - Jenkins instructs the Docker server to build a new Docker image.
   - The image is deployed to the Docker server, making the updated application live.

## Setup and Installation

### Prerequisites

- **AWS Account**: Three EC2 instances for Jenkins, SonarQube, and Docker.
- **GitHub Account**: Repository to host your code.
- **Jenkins**: Installed on an EC2 instance with necessary plugins (Git, Pipeline, Webhook Integration).
- **SonarQube**: Installed on a dedicated EC2 instance.
- **Docker**: Installed on an EC2 instance, with proper network/security group settings.

### Jenkins Setup

1. **Install Jenkins** on your designated EC2 instance.
2. **Install Necessary Plugins**:
   - Git Plugin
   - Pipeline Plugin
   - SonarQube Scanner Plugin
3. **Configure Credentials**: Set up SSH/HTTPS credentials for accessing GitHub.
4. **Create a Pipeline Job**: Configure the job to use a Jenkinsfile from your GitHub repository.

### SonarQube Setup

1. **Install SonarQube** on the designated EC2 instance.
2. **Configure Quality Profiles & Gates**: Set your desired coding standards.
3. **Generate Authentication Token**: For integration with Jenkins.

### Docker Setup

1. **Install Docker** on the designated EC2 instance.
2. **Configure Docker Environment**: Ensure the instance can pull the built images and run containers.
3. **Expose Necessary Ports**: Allow traffic to the deployed application.

### GitHub Webhook Configuration

1. Navigate to your GitHub repository settings.
2. Under **Webhooks**, add a new webhook with the URL pointing to your Jenkins server (e.g., `http://<jenkins-server-ip>:8080/github-webhook/`).
3. Choose the trigger events (e.g., push events, pull requests).

## Configuration Details

- **Jenkinsfile**: Contains the steps for checking out code, triggering SonarQube analysis, building the Docker image, and deploying the application.
- **SonarQube Scanner**: Configured in Jenkins to run analysis and report back to the Jenkins pipeline.
- **Dockerfile**: Defines the build process for the application container.

*Example snippet from a Jenkinsfile:*

```groovy
pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-repo.git'
            }
        }
        stage('Static Code Analysis') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh 'mvn clean verify sonar:sonar'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t your-image:latest .'
            }
        }
        stage('Deploy') {
            steps {
                sh 'docker run -d -p 80:80 your-image:latest'
            }
        }
    }
    post {
        failure {
            echo 'Pipeline failed! Please check the logs.'
        }
    }
}
